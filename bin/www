/**************************************************
* Module dependencies.
**************************************************/
let app = require('../app');
const fs = require('fs');
const debug = require('debug')('adlu:server');
const https = require('https');
const http = require('http');
const logger = require('../helpers/logger');
const config = require('../config/env');
let server = null;

const enviroments = [
	'local', 
	'testing'
];

/**************************************************
* Get port from environment and store in Express.
**************************************************/
let port = normalizePort(config.adlu.port || '8080');
app.set('port', port);

/**************************************************
* Create HTTP server.
**************************************************/
server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**************************************************
* Normalize a port into a number, string, or false.
**************************************************/
function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}

/**************************************************
* Event listener for HTTP server "error" event.
**************************************************/
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string' ? 
		'Pipe ' + port : 
		'Port ' + port;

	// Handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**************************************************
* Event listener for HTTP server "listening" event.
**************************************************/
function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string' ? 
		'pipe ' + addr : 
		'port ' + addr.port;
	debug('Listening on ' + bind);
	logger.info('======================================');
	logger.info('Environment: '+process.env.NODE_ENV);
	logger.info('Listening on ' + bind);
	logger.info('======================================');
}

// Just for testing
module.exports = server;
